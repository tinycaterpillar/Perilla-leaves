Using device: cpu
inference mode
Filename: C:\Users\jinik\OneDrive\문서\바탕 화면\리얼보이스\open\realvoice\feature_light.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    25    485.6 MiB    485.6 MiB           1   @profile
    26                                         def extract_feature(path, train_mode=True):
    27                                             # librosa패키지를 사용하여 음성 파일 load
    28    537.6 MiB     52.0 MiB           1       y, sr = librosa.load(path, sr=CONFIG.SR)
    29                                             
    30                                             # 1초와 0.5초를 샘플 수로 변환
    31    537.6 MiB      0.0 MiB           1       gap = int(1 * sr)
    32    537.6 MiB      0.0 MiB           1       hop = int(0.5 * sr)
    33                                         
    34                                             # 0.5초 간격으로 데이터 추출
    35    537.6 MiB      0.0 MiB           1       samples = []
    36    537.6 MiB      0.0 MiB          10       for start in range(0, len(y) - gap + 1, hop):
    37    537.6 MiB      0.0 MiB           9           end = start + gap
    38    537.6 MiB      0.0 MiB           9           samples.append(y[start:end])
    39    537.6 MiB      0.0 MiB           1       samples.append(y[-gap:])
    40                                         
    41    537.6 MiB      0.0 MiB           1       cnn_feature = []
    42    570.1 MiB      0.0 MiB          11       for sample in samples:
    43                                                 # 멜 스펙트럼 계산
    44    570.0 MiB     12.1 MiB          10           S = librosa.feature.melspectrogram(y=sample, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH, fmax=8000)
    45    570.0 MiB      0.0 MiB          10           log_S = librosa.power_to_db(S, ref=np.max)
    46                                         
    47    570.0 MiB     16.7 MiB          10           fig = plt.figure(frameon=False)
    48    570.0 MiB      0.0 MiB          10           fig.set_size_inches(2.24, 2.24) # (224, 224, 3)
    49    570.1 MiB      1.9 MiB          10           ax = plt.Axes(fig, [0., 0., 1., 1.])
    50    570.1 MiB      0.0 MiB          10           ax.set_axis_off()  # 축을 제거
    51    570.1 MiB      0.0 MiB          10           fig.add_axes(ax)
    52    570.1 MiB      0.4 MiB          10           librosa.display.specshow(log_S, sr=sr, hop_length=CONFIG.HOP_LENGTH, x_axis=None, y_axis=None, fmax=8000, ax=ax)
    53                                         
    54    570.1 MiB      1.0 MiB          10           fig.canvas.draw()
    55    570.1 MiB      0.3 MiB          10           mel_img_array = np.frombuffer(fig.canvas.tostring_rgb(), dtype=np.uint8)
    56    570.1 MiB      0.0 MiB          10           mel_img_array = mel_img_array.reshape(fig.canvas.get_width_height()[::-1] + (3,))
    57    570.1 MiB      0.1 MiB          10           plt.close(fig)  # 그림을 닫아 리소스를 해제
    58                                         
    59    570.1 MiB      0.0 MiB          10           cnn_feature.append(np.array(mel_img_array))
    60                                         
    61                                             # MFCC 계산
    62    571.8 MiB      1.7 MiB           1       mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=CONFIG.N_MFCC, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    63                                         
    64                                             # 델타 MFCC 계산
    65    572.4 MiB      0.5 MiB           1       delta_mfcc = librosa.feature.delta(mfcc)
    66                                         
    67                                             # 델타-델타 MFCC 계산
    68    572.4 MiB      0.0 MiB           1       delta2_mfcc = librosa.feature.delta(mfcc, order=2)
    69                                         
    70                                             # RMS 에너지 계산
    71    572.4 MiB      0.0 MiB           1       rms = librosa.feature.rms(y=y, frame_length=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    72                                         
    73                                             # spectral_bandwidth 계산
    74    572.4 MiB      0.0 MiB           1       spectral_bandwidth = librosa.feature.spectral_bandwidth(y=y, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    75                                         
    76                                             # spectral_centroids 계산
    77    572.4 MiB      0.0 MiB           1       spectral_centroids = librosa.feature.spectral_centroid(y=y, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    78                                         
    79                                             # pitch 계산
    80    576.2 MiB      3.8 MiB           1       piches, magnitudes = librosa.piptrack(y=y, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    81    576.2 MiB      0.0 MiB           1       pitch_strongest = np.argmax(magnitudes, axis=0)
    82    576.2 MiB      0.0 MiB           1       pitches_strongest = piches[pitch_strongest, range(piches.shape[1])]
    83    576.2 MiB      0.0 MiB           1       pitches_strongest = np.expand_dims(pitches_strongest, axis=0)
    84                                         
    85                                             # spectrol roll-off 계산
    86    576.2 MiB      0.0 MiB           1       rolloff = librosa.feature.spectral_rolloff(y=y, sr=sr, roll_percent=0.85, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    87                                         
    88                                             # Spectral Flux 계산
    89    576.2 MiB      0.0 MiB           1       S = np.abs(librosa.stft(y, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH))
    90    576.2 MiB      0.0 MiB           1       spectral_flux = np.sqrt(np.sum(np.diff(S, axis=1)**2, axis=0))
    91    576.2 MiB      0.0 MiB           1       padded_spectral_flux = np.pad(spectral_flux, (1, 0), 'constant')
    92    576.2 MiB      0.0 MiB           1       padded_spectral_flux = np.expand_dims(padded_spectral_flux, axis=0)
    93                                         
    94                                             # rhythm 계산
    95    576.3 MiB      0.0 MiB           1       onset_env = librosa.onset.onset_strength(y=y, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    96    576.3 MiB      0.0 MiB           1       onset_env = np.expand_dims(onset_env, axis=0)
    97                                         
    98    576.3 MiB      0.0 MiB           1       combined_features = np.concatenate((mfcc, delta_mfcc, delta2_mfcc, rms, spectral_bandwidth, spectral_centroids, pitches_strongest, rolloff, padded_spectral_flux, onset_env), axis=0)
    99                                         
   100                                             # Transpose하여 (시간, 특성) 형태로 변환
   101    576.3 MiB      0.0 MiB           1       combined_features_T = combined_features.T
   102                                         
   103                                             # 데이터 정규화
   104    576.3 MiB      0.0 MiB           1       scaler = StandardScaler()
   105    576.3 MiB      0.0 MiB           1       combined_features_normalized = scaler.fit_transform(combined_features_T)
   106                                         
   107                                             # 메모레 관리
   108    576.3 MiB      0.0 MiB           1       gc.collect()
   109                                         
   110    576.3 MiB      0.0 MiB           1       return cnn_feature, combined_features_normalized


Filename: C:\Users\jinik\OneDrive\문서\바탕 화면\리얼보이스\open\realvoice\feature_light.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    25    556.1 MiB    556.1 MiB           1   @profile
    26                                         def extract_feature(path, train_mode=True):
    27                                             # librosa패키지를 사용하여 음성 파일 load
    28    556.9 MiB      0.9 MiB           1       y, sr = librosa.load(path, sr=CONFIG.SR)
    29                                             
    30                                             # 1초와 0.5초를 샘플 수로 변환
    31    556.9 MiB      0.0 MiB           1       gap = int(1 * sr)
    32    556.9 MiB      0.0 MiB           1       hop = int(0.5 * sr)
    33                                         
    34                                             # 0.5초 간격으로 데이터 추출
    35    556.9 MiB      0.0 MiB           1       samples = []
    36    556.9 MiB      0.0 MiB          10       for start in range(0, len(y) - gap + 1, hop):
    37    556.9 MiB      0.0 MiB           9           end = start + gap
    38    556.9 MiB      0.0 MiB           9           samples.append(y[start:end])
    39    556.9 MiB      0.0 MiB           1       samples.append(y[-gap:])
    40                                         
    41    556.9 MiB      0.0 MiB           1       cnn_feature = []
    42    565.4 MiB      0.0 MiB          11       for sample in samples:
    43                                                 # 멜 스펙트럼 계산
    44    565.4 MiB      7.6 MiB          10           S = librosa.feature.melspectrogram(y=sample, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH, fmax=8000)
    45    565.4 MiB      0.0 MiB          10           log_S = librosa.power_to_db(S, ref=np.max)
    46                                         
    47    565.4 MiB      0.0 MiB          10           fig = plt.figure(frameon=False)
    48    565.4 MiB      0.0 MiB          10           fig.set_size_inches(2.24, 2.24) # (224, 224, 3)
    49    565.4 MiB      0.0 MiB          10           ax = plt.Axes(fig, [0., 0., 1., 1.])
    50    565.4 MiB      0.0 MiB          10           ax.set_axis_off()  # 축을 제거
    51    565.4 MiB      0.0 MiB          10           fig.add_axes(ax)
    52    565.4 MiB      0.1 MiB          10           librosa.display.specshow(log_S, sr=sr, hop_length=CONFIG.HOP_LENGTH, x_axis=None, y_axis=None, fmax=8000, ax=ax)
    53                                         
    54    565.4 MiB      0.2 MiB          10           fig.canvas.draw()
    55    565.4 MiB      0.4 MiB          10           mel_img_array = np.frombuffer(fig.canvas.tostring_rgb(), dtype=np.uint8)
    56    565.4 MiB      0.0 MiB          10           mel_img_array = mel_img_array.reshape(fig.canvas.get_width_height()[::-1] + (3,))
    57    565.4 MiB      0.0 MiB          10           plt.close(fig)  # 그림을 닫아 리소스를 해제
    58                                         
    59    565.4 MiB      0.0 MiB          10           cnn_feature.append(np.array(mel_img_array))
    60                                         
    61                                             # MFCC 계산
    62    567.9 MiB      2.5 MiB           1       mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=CONFIG.N_MFCC, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    63                                         
    64                                             # 델타 MFCC 계산
    65    567.9 MiB      0.0 MiB           1       delta_mfcc = librosa.feature.delta(mfcc)
    66                                         
    67                                             # 델타-델타 MFCC 계산
    68    567.9 MiB      0.0 MiB           1       delta2_mfcc = librosa.feature.delta(mfcc, order=2)
    69                                         
    70                                             # RMS 에너지 계산
    71    567.9 MiB      0.0 MiB           1       rms = librosa.feature.rms(y=y, frame_length=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    72                                         
    73                                             # spectral_bandwidth 계산
    74    567.9 MiB      0.0 MiB           1       spectral_bandwidth = librosa.feature.spectral_bandwidth(y=y, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    75                                         
    76                                             # spectral_centroids 계산
    77    567.9 MiB      0.0 MiB           1       spectral_centroids = librosa.feature.spectral_centroid(y=y, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    78                                         
    79                                             # pitch 계산
    80    571.7 MiB      3.8 MiB           1       piches, magnitudes = librosa.piptrack(y=y, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    81    571.7 MiB      0.0 MiB           1       pitch_strongest = np.argmax(magnitudes, axis=0)
    82    571.7 MiB      0.0 MiB           1       pitches_strongest = piches[pitch_strongest, range(piches.shape[1])]
    83    571.7 MiB      0.0 MiB           1       pitches_strongest = np.expand_dims(pitches_strongest, axis=0)
    84                                         
    85                                             # spectrol roll-off 계산
    86    571.7 MiB      0.0 MiB           1       rolloff = librosa.feature.spectral_rolloff(y=y, sr=sr, roll_percent=0.85, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    87                                         
    88                                             # Spectral Flux 계산
    89    571.7 MiB      0.0 MiB           1       S = np.abs(librosa.stft(y, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH))
    90    571.7 MiB      0.0 MiB           1       spectral_flux = np.sqrt(np.sum(np.diff(S, axis=1)**2, axis=0))
    91    571.7 MiB      0.0 MiB           1       padded_spectral_flux = np.pad(spectral_flux, (1, 0), 'constant')
    92    571.7 MiB      0.0 MiB           1       padded_spectral_flux = np.expand_dims(padded_spectral_flux, axis=0)
    93                                         
    94                                             # rhythm 계산
    95    571.8 MiB      0.0 MiB           1       onset_env = librosa.onset.onset_strength(y=y, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    96    571.8 MiB      0.0 MiB           1       onset_env = np.expand_dims(onset_env, axis=0)
    97                                         
    98    571.8 MiB      0.0 MiB           1       combined_features = np.concatenate((mfcc, delta_mfcc, delta2_mfcc, rms, spectral_bandwidth, spectral_centroids, pitches_strongest, rolloff, padded_spectral_flux, onset_env), axis=0)
    99                                         
   100                                             # Transpose하여 (시간, 특성) 형태로 변환
   101    571.8 MiB      0.0 MiB           1       combined_features_T = combined_features.T
   102                                         
   103                                             # 데이터 정규화
   104    571.8 MiB      0.0 MiB           1       scaler = StandardScaler()
   105    571.8 MiB      0.0 MiB           1       combined_features_normalized = scaler.fit_transform(combined_features_T)
   106                                         
   107                                             # 메모레 관리
   108    570.8 MiB     -1.0 MiB           1       gc.collect()
   109                                         
   110    570.8 MiB      0.0 MiB           1       return cnn_feature, combined_features_normalized


Filename: C:\Users\jinik\OneDrive\문서\바탕 화면\리얼보이스\open\realvoice\feature_light.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    25    564.7 MiB    564.7 MiB           1   @profile
    26                                         def extract_feature(path, train_mode=True):
    27                                             # librosa패키지를 사용하여 음성 파일 load
    28    565.6 MiB      0.9 MiB           1       y, sr = librosa.load(path, sr=CONFIG.SR)
    29                                             
    30                                             # 1초와 0.5초를 샘플 수로 변환
    31    565.6 MiB      0.0 MiB           1       gap = int(1 * sr)
    32    565.6 MiB      0.0 MiB           1       hop = int(0.5 * sr)
    33                                         
    34                                             # 0.5초 간격으로 데이터 추출
    35    565.6 MiB      0.0 MiB           1       samples = []
    36    565.6 MiB      0.0 MiB          10       for start in range(0, len(y) - gap + 1, hop):
    37    565.6 MiB      0.0 MiB           9           end = start + gap
    38    565.6 MiB      0.0 MiB           9           samples.append(y[start:end])
    39    565.6 MiB      0.0 MiB           1       samples.append(y[-gap:])
    40                                         
    41    565.6 MiB      0.0 MiB           1       cnn_feature = []
    42    572.0 MiB      0.0 MiB          11       for sample in samples:
    43                                                 # 멜 스펙트럼 계산
    44    572.0 MiB      6.0 MiB          10           S = librosa.feature.melspectrogram(y=sample, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH, fmax=8000)
    45    572.0 MiB      0.0 MiB          10           log_S = librosa.power_to_db(S, ref=np.max)
    46                                         
    47    572.0 MiB      0.0 MiB          10           fig = plt.figure(frameon=False)
    48    572.0 MiB      0.0 MiB          10           fig.set_size_inches(2.24, 2.24) # (224, 224, 3)
    49    572.0 MiB      0.0 MiB          10           ax = plt.Axes(fig, [0., 0., 1., 1.])
    50    572.0 MiB      0.0 MiB          10           ax.set_axis_off()  # 축을 제거
    51    572.0 MiB      0.0 MiB          10           fig.add_axes(ax)
    52    572.0 MiB      0.2 MiB          10           librosa.display.specshow(log_S, sr=sr, hop_length=CONFIG.HOP_LENGTH, x_axis=None, y_axis=None, fmax=8000, ax=ax)
    53                                         
    54    572.0 MiB      0.1 MiB          10           fig.canvas.draw()
    55    572.0 MiB      0.1 MiB          10           mel_img_array = np.frombuffer(fig.canvas.tostring_rgb(), dtype=np.uint8)
    56    572.0 MiB      0.0 MiB          10           mel_img_array = mel_img_array.reshape(fig.canvas.get_width_height()[::-1] + (3,))
    57    572.0 MiB      0.0 MiB          10           plt.close(fig)  # 그림을 닫아 리소스를 해제
    58                                         
    59    572.0 MiB      0.0 MiB          10           cnn_feature.append(np.array(mel_img_array))
    60                                         
    61                                             # MFCC 계산
    62    574.1 MiB      2.0 MiB           1       mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=CONFIG.N_MFCC, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    63                                         
    64                                             # 델타 MFCC 계산
    65    574.1 MiB      0.0 MiB           1       delta_mfcc = librosa.feature.delta(mfcc)
    66                                         
    67                                             # 델타-델타 MFCC 계산
    68    574.1 MiB      0.0 MiB           1       delta2_mfcc = librosa.feature.delta(mfcc, order=2)
    69                                         
    70                                             # RMS 에너지 계산
    71    574.1 MiB      0.0 MiB           1       rms = librosa.feature.rms(y=y, frame_length=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    72                                         
    73                                             # spectral_bandwidth 계산
    74    574.8 MiB      0.7 MiB           1       spectral_bandwidth = librosa.feature.spectral_bandwidth(y=y, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    75                                         
    76                                             # spectral_centroids 계산
    77    574.8 MiB      0.0 MiB           1       spectral_centroids = librosa.feature.spectral_centroid(y=y, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    78                                         
    79                                             # pitch 계산
    80    578.7 MiB      3.9 MiB           1       piches, magnitudes = librosa.piptrack(y=y, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    81    578.7 MiB      0.0 MiB           1       pitch_strongest = np.argmax(magnitudes, axis=0)
    82    578.7 MiB      0.0 MiB           1       pitches_strongest = piches[pitch_strongest, range(piches.shape[1])]
    83    578.7 MiB      0.0 MiB           1       pitches_strongest = np.expand_dims(pitches_strongest, axis=0)
    84                                         
    85                                             # spectrol roll-off 계산
    86    578.7 MiB      0.0 MiB           1       rolloff = librosa.feature.spectral_rolloff(y=y, sr=sr, roll_percent=0.85, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    87                                         
    88                                             # Spectral Flux 계산
    89    578.7 MiB      0.0 MiB           1       S = np.abs(librosa.stft(y, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH))
    90    578.7 MiB      0.0 MiB           1       spectral_flux = np.sqrt(np.sum(np.diff(S, axis=1)**2, axis=0))
    91    578.7 MiB      0.0 MiB           1       padded_spectral_flux = np.pad(spectral_flux, (1, 0), 'constant')
    92    578.7 MiB      0.0 MiB           1       padded_spectral_flux = np.expand_dims(padded_spectral_flux, axis=0)
    93                                         
    94                                             # rhythm 계산
    95    578.7 MiB      0.0 MiB           1       onset_env = librosa.onset.onset_strength(y=y, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    96    578.7 MiB      0.0 MiB           1       onset_env = np.expand_dims(onset_env, axis=0)
    97                                         
    98    578.7 MiB      0.0 MiB           1       combined_features = np.concatenate((mfcc, delta_mfcc, delta2_mfcc, rms, spectral_bandwidth, spectral_centroids, pitches_strongest, rolloff, padded_spectral_flux, onset_env), axis=0)
    99                                         
   100                                             # Transpose하여 (시간, 특성) 형태로 변환
   101    578.7 MiB      0.0 MiB           1       combined_features_T = combined_features.T
   102                                         
   103                                             # 데이터 정규화
   104    578.7 MiB      0.0 MiB           1       scaler = StandardScaler()
   105    578.7 MiB      0.0 MiB           1       combined_features_normalized = scaler.fit_transform(combined_features_T)
   106                                         
   107                                             # 메모레 관리
   108    578.7 MiB      0.0 MiB           1       gc.collect()
   109                                         
   110    578.7 MiB      0.0 MiB           1       return cnn_feature, combined_features_normalized


Filename: C:\Users\jinik\OneDrive\문서\바탕 화면\리얼보이스\open\realvoice\feature_light.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    25    570.0 MiB    570.0 MiB           1   @profile
    26                                         def extract_feature(path, train_mode=True):
    27                                             # librosa패키지를 사용하여 음성 파일 load
    28    570.6 MiB      0.7 MiB           1       y, sr = librosa.load(path, sr=CONFIG.SR)
    29                                             
    30                                             # 1초와 0.5초를 샘플 수로 변환
    31    570.6 MiB      0.0 MiB           1       gap = int(1 * sr)
    32    570.6 MiB      0.0 MiB           1       hop = int(0.5 * sr)
    33                                         
    34                                             # 0.5초 간격으로 데이터 추출
    35    570.6 MiB      0.0 MiB           1       samples = []
    36    570.6 MiB      0.0 MiB          10       for start in range(0, len(y) - gap + 1, hop):
    37    570.6 MiB      0.0 MiB           9           end = start + gap
    38    570.6 MiB      0.0 MiB           9           samples.append(y[start:end])
    39    570.6 MiB      0.0 MiB           1       samples.append(y[-gap:])
    40                                         
    41    570.6 MiB      0.0 MiB           1       cnn_feature = []
    42    577.9 MiB      0.0 MiB          11       for sample in samples:
    43                                                 # 멜 스펙트럼 계산
    44    577.9 MiB      6.3 MiB          10           S = librosa.feature.melspectrogram(y=sample, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH, fmax=8000)
    45    577.9 MiB      0.1 MiB          10           log_S = librosa.power_to_db(S, ref=np.max)
    46                                         
    47    577.9 MiB      0.0 MiB          10           fig = plt.figure(frameon=False)
    48    577.9 MiB      0.0 MiB          10           fig.set_size_inches(2.24, 2.24) # (224, 224, 3)
    49    577.9 MiB      0.0 MiB          10           ax = plt.Axes(fig, [0., 0., 1., 1.])
    50    577.9 MiB      0.0 MiB          10           ax.set_axis_off()  # 축을 제거
    51    577.9 MiB      0.0 MiB          10           fig.add_axes(ax)
    52    577.9 MiB      0.5 MiB          10           librosa.display.specshow(log_S, sr=sr, hop_length=CONFIG.HOP_LENGTH, x_axis=None, y_axis=None, fmax=8000, ax=ax)
    53                                         
    54    577.9 MiB      0.1 MiB          10           fig.canvas.draw()
    55    577.9 MiB      0.2 MiB          10           mel_img_array = np.frombuffer(fig.canvas.tostring_rgb(), dtype=np.uint8)
    56    577.9 MiB      0.0 MiB          10           mel_img_array = mel_img_array.reshape(fig.canvas.get_width_height()[::-1] + (3,))
    57    577.9 MiB      0.0 MiB          10           plt.close(fig)  # 그림을 닫아 리소스를 해제
    58                                         
    59    577.9 MiB      0.0 MiB          10           cnn_feature.append(np.array(mel_img_array))
    60                                         
    61                                             # MFCC 계산
    62    580.1 MiB      2.2 MiB           1       mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=CONFIG.N_MFCC, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    63                                         
    64                                             # 델타 MFCC 계산
    65    580.1 MiB      0.0 MiB           1       delta_mfcc = librosa.feature.delta(mfcc)
    66                                         
    67                                             # 델타-델타 MFCC 계산
    68    580.1 MiB      0.0 MiB           1       delta2_mfcc = librosa.feature.delta(mfcc, order=2)
    69                                         
    70                                             # RMS 에너지 계산
    71    580.1 MiB      0.0 MiB           1       rms = librosa.feature.rms(y=y, frame_length=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    72                                         
    73                                             # spectral_bandwidth 계산
    74    580.9 MiB      0.7 MiB           1       spectral_bandwidth = librosa.feature.spectral_bandwidth(y=y, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    75                                         
    76                                             # spectral_centroids 계산
    77    580.9 MiB      0.0 MiB           1       spectral_centroids = librosa.feature.spectral_centroid(y=y, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    78                                         
    79                                             # pitch 계산
    80    584.8 MiB      3.9 MiB           1       piches, magnitudes = librosa.piptrack(y=y, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    81    584.8 MiB      0.0 MiB           1       pitch_strongest = np.argmax(magnitudes, axis=0)
    82    584.8 MiB      0.0 MiB           1       pitches_strongest = piches[pitch_strongest, range(piches.shape[1])]
    83    584.8 MiB      0.0 MiB           1       pitches_strongest = np.expand_dims(pitches_strongest, axis=0)
    84                                         
    85                                             # spectrol roll-off 계산
    86    584.8 MiB      0.0 MiB           1       rolloff = librosa.feature.spectral_rolloff(y=y, sr=sr, roll_percent=0.85, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    87                                         
    88                                             # Spectral Flux 계산
    89    584.8 MiB      0.0 MiB           1       S = np.abs(librosa.stft(y, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH))
    90    584.8 MiB      0.0 MiB           1       spectral_flux = np.sqrt(np.sum(np.diff(S, axis=1)**2, axis=0))
    91    584.8 MiB      0.0 MiB           1       padded_spectral_flux = np.pad(spectral_flux, (1, 0), 'constant')
    92    584.8 MiB      0.0 MiB           1       padded_spectral_flux = np.expand_dims(padded_spectral_flux, axis=0)
    93                                         
    94                                             # rhythm 계산
    95    584.8 MiB      0.0 MiB           1       onset_env = librosa.onset.onset_strength(y=y, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    96    584.8 MiB      0.0 MiB           1       onset_env = np.expand_dims(onset_env, axis=0)
    97                                         
    98    584.8 MiB      0.0 MiB           1       combined_features = np.concatenate((mfcc, delta_mfcc, delta2_mfcc, rms, spectral_bandwidth, spectral_centroids, pitches_strongest, rolloff, padded_spectral_flux, onset_env), axis=0)
    99                                         
   100                                             # Transpose하여 (시간, 특성) 형태로 변환
   101    584.8 MiB      0.0 MiB           1       combined_features_T = combined_features.T
   102                                         
   103                                             # 데이터 정규화
   104    584.8 MiB      0.0 MiB           1       scaler = StandardScaler()
   105    584.8 MiB      0.0 MiB           1       combined_features_normalized = scaler.fit_transform(combined_features_T)
   106                                         
   107                                             # 메모레 관리
   108    584.8 MiB      0.0 MiB           1       gc.collect()
   109                                         
   110    584.8 MiB      0.0 MiB           1       return cnn_feature, combined_features_normalized


Filename: C:\Users\jinik\OneDrive\문서\바탕 화면\리얼보이스\open\realvoice\feature_light.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    25    575.9 MiB    575.9 MiB           1   @profile
    26                                         def extract_feature(path, train_mode=True):
    27                                             # librosa패키지를 사용하여 음성 파일 load
    28    576.6 MiB      0.7 MiB           1       y, sr = librosa.load(path, sr=CONFIG.SR)
    29                                             
    30                                             # 1초와 0.5초를 샘플 수로 변환
    31    576.6 MiB      0.0 MiB           1       gap = int(1 * sr)
    32    576.6 MiB      0.0 MiB           1       hop = int(0.5 * sr)
    33                                         
    34                                             # 0.5초 간격으로 데이터 추출
    35    576.6 MiB      0.0 MiB           1       samples = []
    36    576.6 MiB      0.0 MiB          10       for start in range(0, len(y) - gap + 1, hop):
    37    576.6 MiB      0.0 MiB           9           end = start + gap
    38    576.6 MiB      0.0 MiB           9           samples.append(y[start:end])
    39    576.6 MiB      0.0 MiB           1       samples.append(y[-gap:])
    40                                         
    41    576.6 MiB      0.0 MiB           1       cnn_feature = []
    42    583.8 MiB      0.0 MiB          11       for sample in samples:
    43                                                 # 멜 스펙트럼 계산
    44    583.8 MiB      5.7 MiB          10           S = librosa.feature.melspectrogram(y=sample, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH, fmax=8000)
    45    583.8 MiB      0.1 MiB          10           log_S = librosa.power_to_db(S, ref=np.max)
    46                                         
    47    583.8 MiB      0.0 MiB          10           fig = plt.figure(frameon=False)
    48    583.8 MiB      0.0 MiB          10           fig.set_size_inches(2.24, 2.24) # (224, 224, 3)
    49    583.8 MiB      0.0 MiB          10           ax = plt.Axes(fig, [0., 0., 1., 1.])
    50    583.8 MiB      0.0 MiB          10           ax.set_axis_off()  # 축을 제거
    51    583.8 MiB      0.0 MiB          10           fig.add_axes(ax)
    52    583.8 MiB      0.3 MiB          10           librosa.display.specshow(log_S, sr=sr, hop_length=CONFIG.HOP_LENGTH, x_axis=None, y_axis=None, fmax=8000, ax=ax)
    53                                         
    54    583.8 MiB      0.9 MiB          10           fig.canvas.draw()
    55    583.8 MiB      0.2 MiB          10           mel_img_array = np.frombuffer(fig.canvas.tostring_rgb(), dtype=np.uint8)
    56    583.8 MiB      0.0 MiB          10           mel_img_array = mel_img_array.reshape(fig.canvas.get_width_height()[::-1] + (3,))
    57    583.8 MiB      0.0 MiB          10           plt.close(fig)  # 그림을 닫아 리소스를 해제
    58                                         
    59    583.8 MiB      0.0 MiB          10           cnn_feature.append(np.array(mel_img_array))
    60                                         
    61                                             # MFCC 계산
    62    586.3 MiB      2.5 MiB           1       mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=CONFIG.N_MFCC, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    63                                         
    64                                             # 델타 MFCC 계산
    65    586.3 MiB      0.0 MiB           1       delta_mfcc = librosa.feature.delta(mfcc)
    66                                         
    67                                             # 델타-델타 MFCC 계산
    68    586.3 MiB      0.0 MiB           1       delta2_mfcc = librosa.feature.delta(mfcc, order=2)
    69                                         
    70                                             # RMS 에너지 계산
    71    586.3 MiB      0.0 MiB           1       rms = librosa.feature.rms(y=y, frame_length=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    72                                         
    73                                             # spectral_bandwidth 계산
    74    586.3 MiB      0.0 MiB           1       spectral_bandwidth = librosa.feature.spectral_bandwidth(y=y, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    75                                         
    76                                             # spectral_centroids 계산
    77    586.3 MiB      0.0 MiB           1       spectral_centroids = librosa.feature.spectral_centroid(y=y, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    78                                         
    79                                             # pitch 계산
    80    590.2 MiB      3.8 MiB           1       piches, magnitudes = librosa.piptrack(y=y, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    81    590.2 MiB      0.0 MiB           1       pitch_strongest = np.argmax(magnitudes, axis=0)
    82    590.2 MiB      0.0 MiB           1       pitches_strongest = piches[pitch_strongest, range(piches.shape[1])]
    83    590.2 MiB      0.0 MiB           1       pitches_strongest = np.expand_dims(pitches_strongest, axis=0)
    84                                         
    85                                             # spectrol roll-off 계산
    86    590.2 MiB      0.0 MiB           1       rolloff = librosa.feature.spectral_rolloff(y=y, sr=sr, roll_percent=0.85, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    87                                         
    88                                             # Spectral Flux 계산
    89    590.2 MiB      0.0 MiB           1       S = np.abs(librosa.stft(y, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH))
    90    590.2 MiB      0.0 MiB           1       spectral_flux = np.sqrt(np.sum(np.diff(S, axis=1)**2, axis=0))
    91    590.2 MiB      0.0 MiB           1       padded_spectral_flux = np.pad(spectral_flux, (1, 0), 'constant')
    92    590.2 MiB      0.0 MiB           1       padded_spectral_flux = np.expand_dims(padded_spectral_flux, axis=0)
    93                                         
    94                                             # rhythm 계산
    95    590.2 MiB      0.0 MiB           1       onset_env = librosa.onset.onset_strength(y=y, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    96    590.2 MiB      0.0 MiB           1       onset_env = np.expand_dims(onset_env, axis=0)
    97                                         
    98    590.2 MiB      0.0 MiB           1       combined_features = np.concatenate((mfcc, delta_mfcc, delta2_mfcc, rms, spectral_bandwidth, spectral_centroids, pitches_strongest, rolloff, padded_spectral_flux, onset_env), axis=0)
    99                                         
   100                                             # Transpose하여 (시간, 특성) 형태로 변환
   101    590.2 MiB      0.0 MiB           1       combined_features_T = combined_features.T
   102                                         
   103                                             # 데이터 정규화
   104    590.2 MiB      0.0 MiB           1       scaler = StandardScaler()
   105    590.2 MiB      0.0 MiB           1       combined_features_normalized = scaler.fit_transform(combined_features_T)
   106                                         
   107                                             # 메모레 관리
   108    590.2 MiB      0.0 MiB           1       gc.collect()
   109                                         
   110    590.2 MiB      0.0 MiB           1       return cnn_feature, combined_features_normalized


Filename: C:\Users\jinik\OneDrive\문서\바탕 화면\리얼보이스\open\realvoice\feature_light.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    25    582.5 MiB    582.5 MiB           1   @profile
    26                                         def extract_feature(path, train_mode=True):
    27                                             # librosa패키지를 사용하여 음성 파일 load
    28    583.2 MiB      0.6 MiB           1       y, sr = librosa.load(path, sr=CONFIG.SR)
    29                                             
    30                                             # 1초와 0.5초를 샘플 수로 변환
    31    583.2 MiB      0.0 MiB           1       gap = int(1 * sr)
    32    583.2 MiB      0.0 MiB           1       hop = int(0.5 * sr)
    33                                         
    34                                             # 0.5초 간격으로 데이터 추출
    35    583.2 MiB      0.0 MiB           1       samples = []
    36    583.2 MiB      0.0 MiB          10       for start in range(0, len(y) - gap + 1, hop):
    37    583.2 MiB      0.0 MiB           9           end = start + gap
    38    583.2 MiB      0.0 MiB           9           samples.append(y[start:end])
    39    583.2 MiB      0.0 MiB           1       samples.append(y[-gap:])
    40                                         
    41    583.2 MiB      0.0 MiB           1       cnn_feature = []
    42    590.2 MiB      0.0 MiB          11       for sample in samples:
    43                                                 # 멜 스펙트럼 계산
    44    590.2 MiB      5.0 MiB          10           S = librosa.feature.melspectrogram(y=sample, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH, fmax=8000)
    45    590.2 MiB      0.1 MiB          10           log_S = librosa.power_to_db(S, ref=np.max)
    46                                         
    47    590.2 MiB      0.0 MiB          10           fig = plt.figure(frameon=False)
    48    590.2 MiB      0.0 MiB          10           fig.set_size_inches(2.24, 2.24) # (224, 224, 3)
    49    590.2 MiB      0.0 MiB          10           ax = plt.Axes(fig, [0., 0., 1., 1.])
    50    590.2 MiB      0.0 MiB          10           ax.set_axis_off()  # 축을 제거
    51    590.2 MiB      0.0 MiB          10           fig.add_axes(ax)
    52    590.2 MiB      0.6 MiB          10           librosa.display.specshow(log_S, sr=sr, hop_length=CONFIG.HOP_LENGTH, x_axis=None, y_axis=None, fmax=8000, ax=ax)
    53                                         
    54    590.2 MiB      1.3 MiB          10           fig.canvas.draw()
    55    590.2 MiB      0.0 MiB          10           mel_img_array = np.frombuffer(fig.canvas.tostring_rgb(), dtype=np.uint8)
    56    590.2 MiB      0.0 MiB          10           mel_img_array = mel_img_array.reshape(fig.canvas.get_width_height()[::-1] + (3,))
    57    590.2 MiB      0.0 MiB          10           plt.close(fig)  # 그림을 닫아 리소스를 해제
    58                                         
    59    590.2 MiB      0.0 MiB          10           cnn_feature.append(np.array(mel_img_array))
    60                                         
    61                                             # MFCC 계산
    62    591.7 MiB      1.5 MiB           1       mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=CONFIG.N_MFCC, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    63                                         
    64                                             # 델타 MFCC 계산
    65    591.7 MiB      0.0 MiB           1       delta_mfcc = librosa.feature.delta(mfcc)
    66                                         
    67                                             # 델타-델타 MFCC 계산
    68    591.7 MiB      0.0 MiB           1       delta2_mfcc = librosa.feature.delta(mfcc, order=2)
    69                                         
    70                                             # RMS 에너지 계산
    71    591.7 MiB      0.0 MiB           1       rms = librosa.feature.rms(y=y, frame_length=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    72                                         
    73                                             # spectral_bandwidth 계산
    74    592.5 MiB      0.8 MiB           1       spectral_bandwidth = librosa.feature.spectral_bandwidth(y=y, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    75                                         
    76                                             # spectral_centroids 계산
    77    592.5 MiB      0.0 MiB           1       spectral_centroids = librosa.feature.spectral_centroid(y=y, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    78                                         
    79                                             # pitch 계산
    80    596.3 MiB      3.8 MiB           1       piches, magnitudes = librosa.piptrack(y=y, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    81    596.3 MiB      0.0 MiB           1       pitch_strongest = np.argmax(magnitudes, axis=0)
    82    596.3 MiB      0.0 MiB           1       pitches_strongest = piches[pitch_strongest, range(piches.shape[1])]
    83    596.3 MiB      0.0 MiB           1       pitches_strongest = np.expand_dims(pitches_strongest, axis=0)
    84                                         
    85                                             # spectrol roll-off 계산
    86    596.3 MiB      0.0 MiB           1       rolloff = librosa.feature.spectral_rolloff(y=y, sr=sr, roll_percent=0.85, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    87                                         
    88                                             # Spectral Flux 계산
    89    596.3 MiB      0.0 MiB           1       S = np.abs(librosa.stft(y, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH))
    90    596.3 MiB      0.0 MiB           1       spectral_flux = np.sqrt(np.sum(np.diff(S, axis=1)**2, axis=0))
    91    596.3 MiB      0.0 MiB           1       padded_spectral_flux = np.pad(spectral_flux, (1, 0), 'constant')
    92    596.3 MiB      0.0 MiB           1       padded_spectral_flux = np.expand_dims(padded_spectral_flux, axis=0)
    93                                         
    94                                             # rhythm 계산
    95    596.4 MiB      0.0 MiB           1       onset_env = librosa.onset.onset_strength(y=y, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    96    596.4 MiB      0.0 MiB           1       onset_env = np.expand_dims(onset_env, axis=0)
    97                                         
    98    596.4 MiB      0.0 MiB           1       combined_features = np.concatenate((mfcc, delta_mfcc, delta2_mfcc, rms, spectral_bandwidth, spectral_centroids, pitches_strongest, rolloff, padded_spectral_flux, onset_env), axis=0)
    99                                         
   100                                             # Transpose하여 (시간, 특성) 형태로 변환
   101    596.4 MiB      0.0 MiB           1       combined_features_T = combined_features.T
   102                                         
   103                                             # 데이터 정규화
   104    596.4 MiB      0.0 MiB           1       scaler = StandardScaler()
   105    596.4 MiB      0.0 MiB           1       combined_features_normalized = scaler.fit_transform(combined_features_T)
   106                                         
   107                                             # 메모레 관리
   108    596.4 MiB      0.0 MiB           1       gc.collect()
   109                                         
   110    596.4 MiB      0.0 MiB           1       return cnn_feature, combined_features_normalized


Filename: C:\Users\jinik\OneDrive\문서\바탕 화면\리얼보이스\open\realvoice\feature_light.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    25    588.3 MiB    588.3 MiB           1   @profile
    26                                         def extract_feature(path, train_mode=True):
    27                                             # librosa패키지를 사용하여 음성 파일 load
    28    589.0 MiB      0.7 MiB           1       y, sr = librosa.load(path, sr=CONFIG.SR)
    29                                             
    30                                             # 1초와 0.5초를 샘플 수로 변환
    31    589.0 MiB      0.0 MiB           1       gap = int(1 * sr)
    32    589.0 MiB      0.0 MiB           1       hop = int(0.5 * sr)
    33                                         
    34                                             # 0.5초 간격으로 데이터 추출
    35    589.0 MiB      0.0 MiB           1       samples = []
    36    589.0 MiB      0.0 MiB          10       for start in range(0, len(y) - gap + 1, hop):
    37    589.0 MiB      0.0 MiB           9           end = start + gap
    38    589.0 MiB      0.0 MiB           9           samples.append(y[start:end])
    39    589.0 MiB      0.0 MiB           1       samples.append(y[-gap:])
    40                                         
    41    589.0 MiB      0.0 MiB           1       cnn_feature = []
    42    596.2 MiB      0.0 MiB          11       for sample in samples:
    43                                                 # 멜 스펙트럼 계산
    44    596.1 MiB      4.8 MiB          10           S = librosa.feature.melspectrogram(y=sample, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH, fmax=8000)
    45    596.1 MiB      0.1 MiB          10           log_S = librosa.power_to_db(S, ref=np.max)
    46                                         
    47    596.1 MiB      0.0 MiB          10           fig = plt.figure(frameon=False)
    48    596.1 MiB      0.0 MiB          10           fig.set_size_inches(2.24, 2.24) # (224, 224, 3)
    49    596.1 MiB      0.0 MiB          10           ax = plt.Axes(fig, [0., 0., 1., 1.])
    50    596.1 MiB      0.0 MiB          10           ax.set_axis_off()  # 축을 제거
    51    596.1 MiB      0.0 MiB          10           fig.add_axes(ax)
    52    596.1 MiB      0.4 MiB          10           librosa.display.specshow(log_S, sr=sr, hop_length=CONFIG.HOP_LENGTH, x_axis=None, y_axis=None, fmax=8000, ax=ax)
    53                                         
    54    596.1 MiB      1.4 MiB          10           fig.canvas.draw()
    55    596.2 MiB      0.5 MiB          10           mel_img_array = np.frombuffer(fig.canvas.tostring_rgb(), dtype=np.uint8)
    56    596.2 MiB      0.0 MiB          10           mel_img_array = mel_img_array.reshape(fig.canvas.get_width_height()[::-1] + (3,))
    57    596.2 MiB      0.0 MiB          10           plt.close(fig)  # 그림을 닫아 리소스를 해제
    58                                         
    59    596.2 MiB      0.0 MiB          10           cnn_feature.append(np.array(mel_img_array))
    60                                         
    61                                             # MFCC 계산
    62    597.8 MiB      1.5 MiB           1       mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=CONFIG.N_MFCC, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    63                                         
    64                                             # 델타 MFCC 계산
    65    597.8 MiB      0.0 MiB           1       delta_mfcc = librosa.feature.delta(mfcc)
    66                                         
    67                                             # 델타-델타 MFCC 계산
    68    597.8 MiB      0.0 MiB           1       delta2_mfcc = librosa.feature.delta(mfcc, order=2)
    69                                         
    70                                             # RMS 에너지 계산
    71    597.8 MiB      0.0 MiB           1       rms = librosa.feature.rms(y=y, frame_length=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    72                                         
    73                                             # spectral_bandwidth 계산
    74    598.5 MiB      0.8 MiB           1       spectral_bandwidth = librosa.feature.spectral_bandwidth(y=y, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    75                                         
    76                                             # spectral_centroids 계산
    77    598.5 MiB      0.0 MiB           1       spectral_centroids = librosa.feature.spectral_centroid(y=y, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    78                                         
    79                                             # pitch 계산
    80    602.4 MiB      3.8 MiB           1       piches, magnitudes = librosa.piptrack(y=y, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    81    602.4 MiB      0.0 MiB           1       pitch_strongest = np.argmax(magnitudes, axis=0)
    82    602.4 MiB      0.0 MiB           1       pitches_strongest = piches[pitch_strongest, range(piches.shape[1])]
    83    602.4 MiB      0.0 MiB           1       pitches_strongest = np.expand_dims(pitches_strongest, axis=0)
    84                                         
    85                                             # spectrol roll-off 계산
    86    602.4 MiB      0.0 MiB           1       rolloff = librosa.feature.spectral_rolloff(y=y, sr=sr, roll_percent=0.85, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    87                                         
    88                                             # Spectral Flux 계산
    89    602.4 MiB      0.0 MiB           1       S = np.abs(librosa.stft(y, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH))
    90    602.4 MiB      0.0 MiB           1       spectral_flux = np.sqrt(np.sum(np.diff(S, axis=1)**2, axis=0))
    91    602.4 MiB      0.0 MiB           1       padded_spectral_flux = np.pad(spectral_flux, (1, 0), 'constant')
    92    602.4 MiB      0.0 MiB           1       padded_spectral_flux = np.expand_dims(padded_spectral_flux, axis=0)
    93                                         
    94                                             # rhythm 계산
    95    602.4 MiB      0.0 MiB           1       onset_env = librosa.onset.onset_strength(y=y, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    96    602.4 MiB      0.0 MiB           1       onset_env = np.expand_dims(onset_env, axis=0)
    97                                         
    98    602.4 MiB      0.0 MiB           1       combined_features = np.concatenate((mfcc, delta_mfcc, delta2_mfcc, rms, spectral_bandwidth, spectral_centroids, pitches_strongest, rolloff, padded_spectral_flux, onset_env), axis=0)
    99                                         
   100                                             # Transpose하여 (시간, 특성) 형태로 변환
   101    602.4 MiB      0.0 MiB           1       combined_features_T = combined_features.T
   102                                         
   103                                             # 데이터 정규화
   104    602.4 MiB      0.0 MiB           1       scaler = StandardScaler()
   105    602.4 MiB      0.0 MiB           1       combined_features_normalized = scaler.fit_transform(combined_features_T)
   106                                         
   107                                             # 메모레 관리
   108    602.4 MiB      0.0 MiB           1       gc.collect()
   109                                         
   110    602.4 MiB      0.0 MiB           1       return cnn_feature, combined_features_normalized


Filename: C:\Users\jinik\OneDrive\문서\바탕 화면\리얼보이스\open\realvoice\feature_light.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    25    594.4 MiB    594.4 MiB           1   @profile
    26                                         def extract_feature(path, train_mode=True):
    27                                             # librosa패키지를 사용하여 음성 파일 load
    28    595.1 MiB      0.7 MiB           1       y, sr = librosa.load(path, sr=CONFIG.SR)
    29                                             
    30                                             # 1초와 0.5초를 샘플 수로 변환
    31    595.1 MiB      0.0 MiB           1       gap = int(1 * sr)
    32    595.1 MiB      0.0 MiB           1       hop = int(0.5 * sr)
    33                                         
    34                                             # 0.5초 간격으로 데이터 추출
    35    595.1 MiB      0.0 MiB           1       samples = []
    36    595.1 MiB      0.0 MiB          10       for start in range(0, len(y) - gap + 1, hop):
    37    595.1 MiB      0.0 MiB           9           end = start + gap
    38    595.1 MiB      0.0 MiB           9           samples.append(y[start:end])
    39    595.1 MiB      0.0 MiB           1       samples.append(y[-gap:])
    40                                         
    41    595.1 MiB      0.0 MiB           1       cnn_feature = []
    42    602.6 MiB      0.0 MiB          11       for sample in samples:
    43                                                 # 멜 스펙트럼 계산
    44    602.6 MiB      5.3 MiB          10           S = librosa.feature.melspectrogram(y=sample, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH, fmax=8000)
    45    602.6 MiB      0.1 MiB          10           log_S = librosa.power_to_db(S, ref=np.max)
    46                                         
    47    602.6 MiB      0.1 MiB          10           fig = plt.figure(frameon=False)
    48    602.6 MiB      0.0 MiB          10           fig.set_size_inches(2.24, 2.24) # (224, 224, 3)
    49    602.6 MiB      0.0 MiB          10           ax = plt.Axes(fig, [0., 0., 1., 1.])
    50    602.6 MiB      0.0 MiB          10           ax.set_axis_off()  # 축을 제거
    51    602.6 MiB      0.0 MiB          10           fig.add_axes(ax)
    52    602.6 MiB      0.5 MiB          10           librosa.display.specshow(log_S, sr=sr, hop_length=CONFIG.HOP_LENGTH, x_axis=None, y_axis=None, fmax=8000, ax=ax)
    53                                         
    54    602.6 MiB      1.4 MiB          10           fig.canvas.draw()
    55    602.6 MiB      0.2 MiB          10           mel_img_array = np.frombuffer(fig.canvas.tostring_rgb(), dtype=np.uint8)
    56    602.6 MiB      0.0 MiB          10           mel_img_array = mel_img_array.reshape(fig.canvas.get_width_height()[::-1] + (3,))
    57    602.6 MiB      0.0 MiB          10           plt.close(fig)  # 그림을 닫아 리소스를 해제
    58                                         
    59    602.6 MiB      0.0 MiB          10           cnn_feature.append(np.array(mel_img_array))
    60                                         
    61                                             # MFCC 계산
    62    604.4 MiB      1.8 MiB           1       mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=CONFIG.N_MFCC, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    63                                         
    64                                             # 델타 MFCC 계산
    65    604.4 MiB      0.0 MiB           1       delta_mfcc = librosa.feature.delta(mfcc)
    66                                         
    67                                             # 델타-델타 MFCC 계산
    68    604.4 MiB      0.0 MiB           1       delta2_mfcc = librosa.feature.delta(mfcc, order=2)
    69                                         
    70                                             # RMS 에너지 계산
    71    604.4 MiB      0.0 MiB           1       rms = librosa.feature.rms(y=y, frame_length=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    72                                         
    73                                             # spectral_bandwidth 계산
    74    604.6 MiB      0.2 MiB           1       spectral_bandwidth = librosa.feature.spectral_bandwidth(y=y, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    75                                         
    76                                             # spectral_centroids 계산
    77    604.6 MiB      0.0 MiB           1       spectral_centroids = librosa.feature.spectral_centroid(y=y, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    78                                         
    79                                             # pitch 계산
    80    608.4 MiB      3.9 MiB           1       piches, magnitudes = librosa.piptrack(y=y, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    81    608.4 MiB      0.0 MiB           1       pitch_strongest = np.argmax(magnitudes, axis=0)
    82    608.4 MiB      0.0 MiB           1       pitches_strongest = piches[pitch_strongest, range(piches.shape[1])]
    83    608.4 MiB      0.0 MiB           1       pitches_strongest = np.expand_dims(pitches_strongest, axis=0)
    84                                         
    85                                             # spectrol roll-off 계산
    86    608.4 MiB      0.0 MiB           1       rolloff = librosa.feature.spectral_rolloff(y=y, sr=sr, roll_percent=0.85, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    87                                         
    88                                             # Spectral Flux 계산
    89    608.4 MiB      0.0 MiB           1       S = np.abs(librosa.stft(y, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH))
    90    608.4 MiB      0.0 MiB           1       spectral_flux = np.sqrt(np.sum(np.diff(S, axis=1)**2, axis=0))
    91    608.4 MiB      0.0 MiB           1       padded_spectral_flux = np.pad(spectral_flux, (1, 0), 'constant')
    92    608.4 MiB      0.0 MiB           1       padded_spectral_flux = np.expand_dims(padded_spectral_flux, axis=0)
    93                                         
    94                                             # rhythm 계산
    95    608.4 MiB      0.0 MiB           1       onset_env = librosa.onset.onset_strength(y=y, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    96    608.4 MiB      0.0 MiB           1       onset_env = np.expand_dims(onset_env, axis=0)
    97                                         
    98    608.4 MiB      0.0 MiB           1       combined_features = np.concatenate((mfcc, delta_mfcc, delta2_mfcc, rms, spectral_bandwidth, spectral_centroids, pitches_strongest, rolloff, padded_spectral_flux, onset_env), axis=0)
    99                                         
   100                                             # Transpose하여 (시간, 특성) 형태로 변환
   101    608.4 MiB      0.0 MiB           1       combined_features_T = combined_features.T
   102                                         
   103                                             # 데이터 정규화
   104    608.4 MiB      0.0 MiB           1       scaler = StandardScaler()
   105    608.4 MiB      0.0 MiB           1       combined_features_normalized = scaler.fit_transform(combined_features_T)
   106                                         
   107                                             # 메모레 관리
   108    608.4 MiB      0.0 MiB           1       gc.collect()
   109                                         
   110    608.4 MiB      0.0 MiB           1       return cnn_feature, combined_features_normalized


Filename: C:\Users\jinik\OneDrive\문서\바탕 화면\리얼보이스\open\realvoice\feature_light.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    25    600.8 MiB    600.8 MiB           1   @profile
    26                                         def extract_feature(path, train_mode=True):
    27                                             # librosa패키지를 사용하여 음성 파일 load
    28    601.5 MiB      0.7 MiB           1       y, sr = librosa.load(path, sr=CONFIG.SR)
    29                                             
    30                                             # 1초와 0.5초를 샘플 수로 변환
    31    601.5 MiB      0.0 MiB           1       gap = int(1 * sr)
    32    601.5 MiB      0.0 MiB           1       hop = int(0.5 * sr)
    33                                         
    34                                             # 0.5초 간격으로 데이터 추출
    35    601.5 MiB      0.0 MiB           1       samples = []
    36    601.5 MiB      0.0 MiB          10       for start in range(0, len(y) - gap + 1, hop):
    37    601.5 MiB      0.0 MiB           9           end = start + gap
    38    601.5 MiB      0.0 MiB           9           samples.append(y[start:end])
    39    601.5 MiB      0.0 MiB           1       samples.append(y[-gap:])
    40                                         
    41    601.5 MiB      0.0 MiB           1       cnn_feature = []
    42    608.9 MiB      0.0 MiB          11       for sample in samples:
    43                                                 # 멜 스펙트럼 계산
    44    608.8 MiB      5.6 MiB          10           S = librosa.feature.melspectrogram(y=sample, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH, fmax=8000)
    45    608.8 MiB      0.1 MiB          10           log_S = librosa.power_to_db(S, ref=np.max)
    46                                         
    47    608.8 MiB      0.0 MiB          10           fig = plt.figure(frameon=False)
    48    608.8 MiB      0.0 MiB          10           fig.set_size_inches(2.24, 2.24) # (224, 224, 3)
    49    608.8 MiB      0.0 MiB          10           ax = plt.Axes(fig, [0., 0., 1., 1.])
    50    608.8 MiB      0.0 MiB          10           ax.set_axis_off()  # 축을 제거
    51    608.8 MiB      0.0 MiB          10           fig.add_axes(ax)
    52    608.8 MiB      0.4 MiB          10           librosa.display.specshow(log_S, sr=sr, hop_length=CONFIG.HOP_LENGTH, x_axis=None, y_axis=None, fmax=8000, ax=ax)
    53                                         
    54    608.9 MiB      1.1 MiB          10           fig.canvas.draw()
    55    608.9 MiB      0.1 MiB          10           mel_img_array = np.frombuffer(fig.canvas.tostring_rgb(), dtype=np.uint8)
    56    608.9 MiB      0.0 MiB          10           mel_img_array = mel_img_array.reshape(fig.canvas.get_width_height()[::-1] + (3,))
    57    608.9 MiB      0.0 MiB          10           plt.close(fig)  # 그림을 닫아 리소스를 해제
    58                                         
    59    608.9 MiB      0.0 MiB          10           cnn_feature.append(np.array(mel_img_array))
    60                                         
    61                                             # MFCC 계산
    62    610.1 MiB      1.2 MiB           1       mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=CONFIG.N_MFCC, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    63                                         
    64                                             # 델타 MFCC 계산
    65    610.1 MiB      0.0 MiB           1       delta_mfcc = librosa.feature.delta(mfcc)
    66                                         
    67                                             # 델타-델타 MFCC 계산
    68    610.1 MiB      0.0 MiB           1       delta2_mfcc = librosa.feature.delta(mfcc, order=2)
    69                                         
    70                                             # RMS 에너지 계산
    71    610.1 MiB      0.0 MiB           1       rms = librosa.feature.rms(y=y, frame_length=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    72                                         
    73                                             # spectral_bandwidth 계산
    74    610.9 MiB      0.8 MiB           1       spectral_bandwidth = librosa.feature.spectral_bandwidth(y=y, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    75                                         
    76                                             # spectral_centroids 계산
    77    610.9 MiB      0.0 MiB           1       spectral_centroids = librosa.feature.spectral_centroid(y=y, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    78                                         
    79                                             # pitch 계산
    80    614.8 MiB      3.9 MiB           1       piches, magnitudes = librosa.piptrack(y=y, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    81    614.8 MiB      0.0 MiB           1       pitch_strongest = np.argmax(magnitudes, axis=0)
    82    614.8 MiB      0.0 MiB           1       pitches_strongest = piches[pitch_strongest, range(piches.shape[1])]
    83    614.8 MiB      0.0 MiB           1       pitches_strongest = np.expand_dims(pitches_strongest, axis=0)
    84                                         
    85                                             # spectrol roll-off 계산
    86    614.8 MiB      0.0 MiB           1       rolloff = librosa.feature.spectral_rolloff(y=y, sr=sr, roll_percent=0.85, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    87                                         
    88                                             # Spectral Flux 계산
    89    614.8 MiB      0.0 MiB           1       S = np.abs(librosa.stft(y, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH))
    90    614.8 MiB      0.0 MiB           1       spectral_flux = np.sqrt(np.sum(np.diff(S, axis=1)**2, axis=0))
    91    614.8 MiB      0.0 MiB           1       padded_spectral_flux = np.pad(spectral_flux, (1, 0), 'constant')
    92    614.8 MiB      0.0 MiB           1       padded_spectral_flux = np.expand_dims(padded_spectral_flux, axis=0)
    93                                         
    94                                             # rhythm 계산
    95    614.8 MiB      0.0 MiB           1       onset_env = librosa.onset.onset_strength(y=y, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    96    614.8 MiB      0.0 MiB           1       onset_env = np.expand_dims(onset_env, axis=0)
    97                                         
    98    614.9 MiB      0.0 MiB           1       combined_features = np.concatenate((mfcc, delta_mfcc, delta2_mfcc, rms, spectral_bandwidth, spectral_centroids, pitches_strongest, rolloff, padded_spectral_flux, onset_env), axis=0)
    99                                         
   100                                             # Transpose하여 (시간, 특성) 형태로 변환
   101    614.9 MiB      0.0 MiB           1       combined_features_T = combined_features.T
   102                                         
   103                                             # 데이터 정규화
   104    614.9 MiB      0.0 MiB           1       scaler = StandardScaler()
   105    614.9 MiB      0.1 MiB           1       combined_features_normalized = scaler.fit_transform(combined_features_T)
   106                                         
   107                                             # 메모레 관리
   108    614.9 MiB      0.0 MiB           1       gc.collect()
   109                                         
   110    614.9 MiB      0.0 MiB           1       return cnn_feature, combined_features_normalized


Filename: C:\Users\jinik\OneDrive\문서\바탕 화면\리얼보이스\open\realvoice\feature_light.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    25    606.9 MiB    606.9 MiB           1   @profile
    26                                         def extract_feature(path, train_mode=True):
    27                                             # librosa패키지를 사용하여 음성 파일 load
    28    607.6 MiB      0.6 MiB           1       y, sr = librosa.load(path, sr=CONFIG.SR)
    29                                             
    30                                             # 1초와 0.5초를 샘플 수로 변환
    31    607.6 MiB      0.0 MiB           1       gap = int(1 * sr)
    32    607.6 MiB      0.0 MiB           1       hop = int(0.5 * sr)
    33                                         
    34                                             # 0.5초 간격으로 데이터 추출
    35    607.6 MiB      0.0 MiB           1       samples = []
    36    607.6 MiB      0.0 MiB          10       for start in range(0, len(y) - gap + 1, hop):
    37    607.6 MiB      0.0 MiB           9           end = start + gap
    38    607.6 MiB      0.0 MiB           9           samples.append(y[start:end])
    39    607.6 MiB      0.0 MiB           1       samples.append(y[-gap:])
    40                                         
    41    607.6 MiB      0.0 MiB           1       cnn_feature = []
    42    615.0 MiB      0.0 MiB          11       for sample in samples:
    43                                                 # 멜 스펙트럼 계산
    44    614.9 MiB      4.7 MiB          10           S = librosa.feature.melspectrogram(y=sample, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH, fmax=8000)
    45    614.9 MiB      0.1 MiB          10           log_S = librosa.power_to_db(S, ref=np.max)
    46                                         
    47    614.9 MiB      0.0 MiB          10           fig = plt.figure(frameon=False)
    48    614.9 MiB      0.0 MiB          10           fig.set_size_inches(2.24, 2.24) # (224, 224, 3)
    49    614.9 MiB      0.0 MiB          10           ax = plt.Axes(fig, [0., 0., 1., 1.])
    50    614.9 MiB      0.0 MiB          10           ax.set_axis_off()  # 축을 제거
    51    614.9 MiB      0.0 MiB          10           fig.add_axes(ax)
    52    614.9 MiB      0.6 MiB          10           librosa.display.specshow(log_S, sr=sr, hop_length=CONFIG.HOP_LENGTH, x_axis=None, y_axis=None, fmax=8000, ax=ax)
    53                                         
    54    614.9 MiB      1.8 MiB          10           fig.canvas.draw()
    55    615.0 MiB      0.2 MiB          10           mel_img_array = np.frombuffer(fig.canvas.tostring_rgb(), dtype=np.uint8)
    56    615.0 MiB      0.0 MiB          10           mel_img_array = mel_img_array.reshape(fig.canvas.get_width_height()[::-1] + (3,))
    57    615.0 MiB      0.0 MiB          10           plt.close(fig)  # 그림을 닫아 리소스를 해제
    58                                         
    59    615.0 MiB      0.0 MiB          10           cnn_feature.append(np.array(mel_img_array))
    60                                         
    61                                             # MFCC 계산
    62    616.3 MiB      1.2 MiB           1       mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=CONFIG.N_MFCC, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    63                                         
    64                                             # 델타 MFCC 계산
    65    616.3 MiB      0.0 MiB           1       delta_mfcc = librosa.feature.delta(mfcc)
    66                                         
    67                                             # 델타-델타 MFCC 계산
    68    616.3 MiB      0.0 MiB           1       delta2_mfcc = librosa.feature.delta(mfcc, order=2)
    69                                         
    70                                             # RMS 에너지 계산
    71    616.3 MiB      0.0 MiB           1       rms = librosa.feature.rms(y=y, frame_length=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    72                                         
    73                                             # spectral_bandwidth 계산
    74    616.3 MiB      0.0 MiB           1       spectral_bandwidth = librosa.feature.spectral_bandwidth(y=y, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    75                                         
    76                                             # spectral_centroids 계산
    77    616.3 MiB      0.0 MiB           1       spectral_centroids = librosa.feature.spectral_centroid(y=y, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    78                                         
    79                                             # pitch 계산
    80    620.3 MiB      4.1 MiB           1       piches, magnitudes = librosa.piptrack(y=y, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    81    620.3 MiB      0.0 MiB           1       pitch_strongest = np.argmax(magnitudes, axis=0)
    82    620.3 MiB      0.0 MiB           1       pitches_strongest = piches[pitch_strongest, range(piches.shape[1])]
    83    620.3 MiB      0.0 MiB           1       pitches_strongest = np.expand_dims(pitches_strongest, axis=0)
    84                                         
    85                                             # spectrol roll-off 계산
    86    620.3 MiB      0.0 MiB           1       rolloff = librosa.feature.spectral_rolloff(y=y, sr=sr, roll_percent=0.85, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    87                                         
    88                                             # Spectral Flux 계산
    89    620.4 MiB      0.0 MiB           1       S = np.abs(librosa.stft(y, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH))
    90    620.4 MiB      0.0 MiB           1       spectral_flux = np.sqrt(np.sum(np.diff(S, axis=1)**2, axis=0))
    91    620.4 MiB      0.0 MiB           1       padded_spectral_flux = np.pad(spectral_flux, (1, 0), 'constant')
    92    620.4 MiB      0.0 MiB           1       padded_spectral_flux = np.expand_dims(padded_spectral_flux, axis=0)
    93                                         
    94                                             # rhythm 계산
    95    620.4 MiB      0.0 MiB           1       onset_env = librosa.onset.onset_strength(y=y, sr=sr, n_fft=CONFIG.N_FFT, hop_length=CONFIG.HOP_LENGTH)
    96    620.4 MiB      0.0 MiB           1       onset_env = np.expand_dims(onset_env, axis=0)
    97                                         
    98    620.4 MiB      0.0 MiB           1       combined_features = np.concatenate((mfcc, delta_mfcc, delta2_mfcc, rms, spectral_bandwidth, spectral_centroids, pitches_strongest, rolloff, padded_spectral_flux, onset_env), axis=0)
    99                                         
   100                                             # Transpose하여 (시간, 특성) 형태로 변환
   101    620.4 MiB      0.0 MiB           1       combined_features_T = combined_features.T
   102                                         
   103                                             # 데이터 정규화
   104    620.4 MiB      0.0 MiB           1       scaler = StandardScaler()
   105    620.4 MiB      0.0 MiB           1       combined_features_normalized = scaler.fit_transform(combined_features_T)
   106                                         
   107                                             # 메모레 관리
   108    620.4 MiB      0.0 MiB           1       gc.collect()
   109                                         
   110    620.4 MiB      0.0 MiB           1       return cnn_feature, combined_features_normalized


Filename: C:\Users\jinik\OneDrive\문서\바탕 화면\리얼보이스\open\realvoice\data_loader_light.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    44    613.7 MiB    613.7 MiB           1   @profile
    45                                         def collate_fn(batch):
    46    613.7 MiB      0.0 MiB           1       if len(batch[0]) == 3:  # 레이블이 있는 경우
    47                                                 cnn_features, rnn_features, labels = zip(*batch)
    48                                             else:  # 레이블이 없는 경우
    49    613.7 MiB      0.0 MiB           1           cnn_features, rnn_features = zip(*batch)
    50    613.7 MiB      0.0 MiB           1           labels = None
    51                                             
    52    613.7 MiB      0.0 MiB          13       lengths = torch.tensor([len(rnn) for rnn in rnn_features])
    53    613.9 MiB      0.2 MiB           1       sorted_indices = lengths.argsort(descending=True)
    54                                             
    55    614.0 MiB      0.1 MiB          13       sorted_cnn_features = [cnn_features[i] for i in sorted_indices]
    56    614.0 MiB      0.0 MiB          13       sorted_rnn_features = [rnn_features[i] for i in sorted_indices]
    57                                         
    58    724.9 MiB    111.0 MiB          13       x_cnn = pad_sequence([f.clone().detach() for f in sorted_cnn_features], batch_first=True)
    59    727.9 MiB      2.9 MiB          13       x_rnn = pad_sequence([f.clone().detach() for f in sorted_rnn_features], batch_first=True)
    60    727.9 MiB      0.0 MiB          13       x_len_cnn = torch.tensor([len(cnn) for cnn in sorted_cnn_features])
    61    727.9 MiB      0.0 MiB          13       x_len_rnn = torch.tensor([len(cnn) for cnn in sorted_rnn_features])
    62                                             
    63    727.9 MiB      0.0 MiB           1       if labels is not None:
    64                                                 sorted_labels = torch.stack([labels[i] for i in sorted_indices])
    65                                                 return x_cnn, x_len_cnn, x_rnn, x_len_rnn, sorted_labels
    66                                             else:
    67    727.9 MiB      0.0 MiB           1           return x_cnn, x_len_cnn, x_rnn, x_len_rnn


Garbage collection triggered. Memory usage: 86.6%
Filename: tmp.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    50    485.3 MiB    485.3 MiB           1   @profile
    51                                         def inference(model, test_loader, device):
    52    485.3 MiB      0.0 MiB           1       model.to(device)
    53    485.3 MiB      0.0 MiB           1       model.eval()
    54    485.3 MiB      0.0 MiB           1       predictions = []
    55    485.3 MiB   -407.0 MiB           2       with torch.no_grad():
    56    725.3 MiB    194.9 MiB           2           for i, (x_cnn, x_len_cnn, x_rnn, x_len_rnn) in tqdm(enumerate(test_loader)):
    57    725.3 MiB      0.0 MiB           1               x_cnn = x_cnn.float().to(device)
    58    725.3 MiB      0.0 MiB           1               x_rnn = x_rnn.float().to(device)
    59                                                     
    60    163.0 MiB   -562.3 MiB           1               probs = model(x_cnn, x_len_cnn, x_rnn, x_len_rnn)
    61                                         
    62    163.2 MiB      0.2 MiB           1               predictions.append(probs.cpu().numpy())
    63    363.3 MiB    200.1 MiB           1               if i % 10 == 0: check_memory_usage()
    64    318.4 MiB   -166.9 MiB           1       predictions = np.concatenate(predictions, axis=0)
    65    318.4 MiB      0.0 MiB           1       return predictions


